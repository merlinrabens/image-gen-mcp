name: Version and Release

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      version:
        description: 'Version type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
          - prerelease
          - prepatch
          - preminor
          - premajor

jobs:
  # Automatically bump version based on commit messages
  auto-version:
    if: github.event_name == 'push' && !contains(github.event.head_commit.message, '[skip ci]')
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write

    outputs:
      new_version: ${{ steps.version.outputs.new_version }}
      new_tag: ${{ steps.version.outputs.new_tag }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        run: npm ci

      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Determine version bump type
        id: bump_type
        run: |
          # Analyze commit messages to determine version bump
          # Default to patch
          BUMP_TYPE="patch"

          # Get commits since last tag
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")

          if [ -z "$LAST_TAG" ]; then
            # No tags yet, this is the first release
            COMMITS=$(git log --pretty=format:"%s" --no-merges)
          else
            COMMITS=$(git log ${LAST_TAG}..HEAD --pretty=format:"%s" --no-merges)
          fi

          # Check commit messages for version hints
          if echo "$COMMITS" | grep -E "^(feat!|fix!|BREAKING CHANGE)" > /dev/null; then
            BUMP_TYPE="major"
          elif echo "$COMMITS" | grep -E "^feat(\(.+\))?:" > /dev/null; then
            BUMP_TYPE="minor"
          elif echo "$COMMITS" | grep -E "^fix(\(.+\))?:" > /dev/null; then
            BUMP_TYPE="patch"
          fi

          echo "BUMP_TYPE=$BUMP_TYPE" >> $GITHUB_OUTPUT
          echo "Determined version bump type: $BUMP_TYPE"

      - name: Bump version
        id: version
        run: |
          # Current version
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "Current version: $CURRENT_VERSION"

          # Bump version
          npm version ${{ steps.bump_type.outputs.BUMP_TYPE }} --no-git-tag-version

          # Get new version
          NEW_VERSION=$(node -p "require('./package.json').version")
          echo "New version: $NEW_VERSION"

          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "new_tag=v$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Update lock file
        run: npm install --package-lock-only

      - name: Commit version bump
        run: |
          git add package.json package-lock.json
          git commit -m "chore: bump version to ${{ steps.version.outputs.new_version }} [skip ci]"

      - name: Push changes
        run: git push

      - name: Create and push tag
        run: |
          git tag ${{ steps.version.outputs.new_tag }}
          git push origin ${{ steps.version.outputs.new_tag }}

  # Manual version bump
  manual-version:
    if: github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write

    outputs:
      new_version: ${{ steps.version.outputs.new_version }}
      new_tag: ${{ steps.version.outputs.new_tag }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        run: npm ci

      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Bump version
        id: version
        run: |
          # Current version
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "Current version: $CURRENT_VERSION"

          # Bump version
          npm version ${{ github.event.inputs.version }} --no-git-tag-version

          # Get new version
          NEW_VERSION=$(node -p "require('./package.json').version")
          echo "New version: $NEW_VERSION"

          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "new_tag=v$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Update lock file
        run: npm install --package-lock-only

      - name: Commit version bump
        run: |
          git add package.json package-lock.json
          git commit -m "chore: bump version to ${{ steps.version.outputs.new_version }} [skip ci]"

      - name: Push changes
        run: git push

      - name: Create and push tag
        run: |
          git tag ${{ steps.version.outputs.new_tag }}
          git push origin ${{ steps.version.outputs.new_tag }}

  # Publish to NPM after version bump
  publish:
    needs: [auto-version, manual-version]
    if: always() && (needs.auto-version.result == 'success' || needs.manual-version.result == 'success')
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        run: npm ci

      - name: Build package
        run: npm run build

      - name: Run tests
        run: npm test

      - name: Publish to NPM
        run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Get version info
        id: version_info
        run: |
          VERSION=${{ needs.auto-version.outputs.new_version || needs.manual-version.outputs.new_version }}
          TAG=${{ needs.auto-version.outputs.new_tag || needs.manual-version.outputs.new_tag }}
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "TAG=$TAG" >> $GITHUB_OUTPUT

      - name: Notify success
        run: |
          echo "✅ Successfully published image-gen-mcp@${{ steps.version_info.outputs.VERSION }} to NPM"
          echo "📦 Install with: npm install -g image-gen-mcp@latest"
          echo "🏷️ Tagged as: ${{ steps.version_info.outputs.TAG }}"